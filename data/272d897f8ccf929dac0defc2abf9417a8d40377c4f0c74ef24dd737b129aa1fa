#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D depth_map;
uniform highp vec4 environmentRGB_depthScale;
uniform highp vec4 ambientRGB_roughnessA;
uniform highp vec4 diffuseRGB_metallicA;
uniform highp sampler2D roughness_map;
uniform highp sampler2D diffuse_map;
uniform highp sampler2D ambient_map;
uniform highp sampler2D ao_map;
uniform highp sampler2D normal_map;
uniform highp mat4 inv_camera_transform;
uniform int features_mask;
uniform int light_count;
uniform highp vec3 light_positions[6];
uniform highp vec3 light_colors[6];
uniform highp sampler2D ibl_brdf_lut;
uniform highp samplerCube environment_map;

in highp vec3 tangent;
in highp vec3 bitangent;
in highp vec3 normal;
in highp vec2 texCoord;
in highp vec3 pos;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp mat3 _1127 = mat3(normalize(tangent), normalize(bitangent), normalize(normal));
    highp vec2 _2604;
    if ((32 & features_mask) != int(0u))
    {
        highp vec3 _1438 = normalize(transpose(_1127) * (-pos));
        highp float _1465 = mix(16.0, 4.0, max(_1438.z, 0.0));
        highp float _1467 = 1.0 / _1465;
        highp vec2 _1475 = (_1438.xy * environmentRGB_depthScale.w) / vec2(_1465);
        highp vec4 _1479 = texture(depth_map, texCoord);
        highp float _1480 = _1479.x;
        highp float _2597;
        highp float _2598;
        highp vec2 _2600;
        highp float _2602;
        _2602 = _1480;
        _2600 = texCoord;
        _2598 = _1480;
        _2597 = 0.0;
        for (int _2599 = 0; (_2597 < _2598) && (_2599 < 16); )
        {
            highp vec2 _1494 = _2600 - _1475;
            _2602 = _2598;
            _2600 = _1494;
            _2599++;
            _2598 = texture(depth_map, _1494).x;
            _2597 += _1467;
            continue;
        }
        highp float _1511 = _2598 - _2597;
        _2604 = mix(_2600, _2600 + _1475, vec2(_1511 / (_1511 - ((_2602 - _2597) + _1467))));
    }
    else
    {
        _2604 = texCoord;
    }
    highp vec3 _2682;
    if ((1 & features_mask) != int(0u))
    {
        _2682 = diffuseRGB_metallicA.xyz * texture(diffuse_map, _2604).xyz;
    }
    else
    {
        _2682 = diffuseRGB_metallicA.xyz;
    }
    highp float _2671;
    if ((8 & features_mask) != int(0u))
    {
        _2671 = ambientRGB_roughnessA.w * texture(roughness_map, _2604).x;
    }
    else
    {
        _2671 = ambientRGB_roughnessA.w;
    }
    highp vec3 _2688;
    if ((4 & features_mask) != int(0u))
    {
        _2688 = ambientRGB_roughnessA.xyz * texture(ambient_map, _2604).xyz;
    }
    else
    {
        _2688 = ambientRGB_roughnessA.xyz;
    }
    bool _1376 = (64 & features_mask) != int(0u);
    bool _1389;
    if (_1376)
    {
        _1389 = (16 & features_mask) != int(0u);
    }
    else
    {
        _1389 = _1376;
    }
    highp float _2654;
    if (_1389)
    {
        _2654 = texture(ao_map, _2604).x;
    }
    else
    {
        _2654 = 1.0;
    }
    highp vec3 _2674;
    if ((2 & features_mask) != int(0u))
    {
        highp vec2 _1537 = (texture(normal_map, _2604).xy * 2.0) - vec2(1.0);
        highp float _1539 = _1537.x;
        highp float _1545 = _1537.y;
        _2674 = _1127 * vec3(_1539, _1545, sqrt((1.0 - (_1539 * _1539)) - (_1545 * _1545)));
    }
    else
    {
        _2674 = _1127 * vec3(0.0, 0.0, 1.0);
    }
    highp vec3 _1571 = normalize(-pos);
    highp float _1578 = max(dot(_2674, _1571), 0.0);
    highp vec3 _1585 = mix(vec3(0.039999999105930328369140625), _2682, vec3(diffuseRGB_metallicA.w));
    highp float _1591 = _2671 * _2671;
    highp float _1597 = _1591 * _1591;
    highp float _1602 = (_2671 + 1.0) * 0.125;
    highp float _1621 = mix(_1578, 1.0, _1602);
    highp float _1628 = 1.0 - _1578;
    highp float _1631 = _1628 * _1628;
    highp float _1636 = (_1631 * _1631) * _1628;
    highp vec3 _1640 = mix(vec3(_1636), vec3(1.0), _1585);
    highp vec3 _2716;
    _2716 = vec3(0.0);
    for (int _2714 = 0; _2714 < light_count; )
    {
        highp vec3 _1699 = light_positions[_2714] - pos;
        highp vec3 _1701 = normalize(_1699);
        highp vec3 _1706 = normalize(_1571 + _1701);
        highp float _1718 = max(dot(_2674, _1701), 0.0);
        highp float _1723 = max(dot(_2674, _1706), 0.0);
        highp float _1787 = 1.0 - max(dot(_1706, _1701), 0.0);
        highp float _1790 = _1787 * _1787;
        highp float _1806 = 1.0 - _1718;
        highp float _1809 = _1806 * _1806;
        highp float _1832 = ((_1723 * _1723) * (_1597 - 1.0)) + 1.0;
        _2716 += ((((mix(vec3((_1790 * _1790) * _1787), vec3(1.0), _1585) * (_1597 / ((((3.1415927410125732421875 * _1832) * _1832) * 4.0) * (_1621 * mix(_1718, 1.0, _1602))))) + (((vec3(1.0) - mix(vec3((_1809 * _1809) * _1806), vec3(1.0), _1585)) * (vec3(1.0) - _1640)) * (_2682 * mix(0.3183098733425140380859375, 0.0, diffuseRGB_metallicA.w)))) * (light_colors[_2714] / vec3(dot(_1699, _1699)))) * _1718);
        _2714++;
        continue;
    }
    highp vec3 _2736;
    if ((16 & features_mask) != int(0u))
    {
        highp vec4 _1899 = texture(ibl_brdf_lut, vec2(_1578, _2671));
        _2736 = ((texture(environment_map, (mat3(inv_camera_transform[0].xyz, inv_camera_transform[1].xyz, inv_camera_transform[2].xyz) * reflect(pos, _2674)).xzy * vec3(1.0, -1.0, 1.0)).xyz * (((_1585 + ((max(vec3(1.0 - _2671), _1585) - _1585) * _1636)) * _1899.x) + vec3(_1899.y))) * _2654) * environmentRGB_depthScale.xyz;
    }
    else
    {
        _2736 = vec3(0.0);
    }
    highp vec3 _1188 = (_2688 + _2716) + _2736;
    highp vec3 _2738;
    if ((128 & features_mask) != int(0u))
    {
        highp vec3 _2048 = smoothstep(vec3(0.0), vec3(0.2199999988079071044921875), _1188);
        highp vec3 _2056 = step(vec3(0.532000005245208740234375), _1188);
        _2738 = pow((((pow(_1188 * vec3(4.545454502105712890625), vec3(1.33000004291534423828125)) * 0.2199999988079071044921875) * (vec3(1.0) - _2048)) + ((vec3(0.2199999988079071044921875) + ((_1188 - vec3(0.2199999988079071044921875)) * 1.0)) * (_2048 - _2056))) + ((vec3(1.0) - (exp((_1188 - vec3(0.532000005245208740234375)) * (-2.13675212860107421875)) * 0.467999994754791259765625)) * _2056), vec3(0.4545454680919647216796875));
    }
    else
    {
        _2738 = _1188;
    }
    fragColor = vec4(_2738, 1.0);
}

