#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D tex_aux[3];
uniform highp sampler2D tex;
uniform int light_count;
uniform highp vec3 light_positions[6];
uniform highp vec3 light_colors[6];

in highp vec2 texCoord;
in highp vec3 tangent;
in highp vec3 bitangent;
in highp vec3 normal;
in highp vec3 pos;
in highp vec4 color;
in highp vec4 customParams;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp vec4 _537 = texture(tex_aux[2], texCoord);
    highp float _540 = _537.w;
    if (_540 < 0.300000011920928955078125)
    {
        discard;
    }
    highp vec4 _551 = texture(tex_aux[0], texCoord);
    highp vec4 _677 = texture(tex_aux[1], texCoord);
    highp vec2 _681 = (_677.xy * 2.0) - vec2(1.0);
    highp float _683 = _681.x;
    highp float _689 = _681.y;
    highp vec4 _595 = texture(tex, texCoord);
    highp vec3 _597 = color.xyz * _595.xyz;
    highp float _600 = _537.x;
    highp vec3 _610 = normalize(mat3(normalize(tangent), normalize(bitangent), normalize(normal)) * vec3(_683, _689, sqrt((-_689) * _689 + ((-_683) * _683 + 1.0))));
    highp vec3 _715 = normalize(-pos);
    highp float _722 = max(dot(_610, _715), 0.0);
    highp vec3 _729 = mix(vec3(0.039999999105930328369140625), _597, vec3(customParams.w));
    highp float _735 = _600 * _600;
    highp float _741 = _735 * _735;
    highp float _746 = (_600 + 1.0) * 0.125;
    highp float _765 = mix(_722, 1.0, _746);
    highp float _772 = 1.0 - _722;
    highp float _775 = _772 * _772;
    highp vec3 _784 = mix(vec3((_775 * _775) * _772), vec3(1.0), _729);
    highp vec3 _1463;
    _1463 = vec3(0.0);
    for (int _1461 = 0; _1461 < light_count; )
    {
        highp vec3 _843 = light_positions[_1461] - pos;
        highp vec3 _845 = normalize(_843);
        highp vec3 _850 = normalize(_715 + _845);
        highp float _862 = max(dot(_610, _845), 0.0);
        highp float _867 = max(dot(_610, _850), 0.0);
        highp float _931 = 1.0 - max(dot(_850, _845), 0.0);
        highp float _934 = _931 * _931;
        highp float _950 = 1.0 - _862;
        highp float _953 = _950 * _950;
        highp float _976 = (_867 * _867) * (_735 * _735 + (-1.0)) + 1.0;
        _1463 += (((((vec3(1.0) - mix(vec3((_953 * _953) * _950), vec3(1.0), _729)) * (vec3(1.0) - _784)) * (_597 * mix(0.3183098733425140380859375, 0.0, customParams.w)) + (mix(vec3((_934 * _934) * _931), vec3(1.0), _729) * (_741 / ((((3.1415927410125732421875 * _976) * _976) * 4.0) * (_765 * mix(_862, 1.0, _746)))))) * (light_colors[_1461] / vec3(dot(_843, _843)))) * _862);
        _1461++;
        continue;
    }
    highp vec3 _636 = customParams.xyz * _551.xyz + _1463;
    highp vec3 _1056 = smoothstep(vec3(0.0), vec3(0.2199999988079071044921875), _636);
    highp vec3 _1064 = step(vec3(0.532000005245208740234375), _636);
    fragColor = vec4(pow((vec3(1.0) - (exp((_636 - vec3(0.532000005245208740234375)) * (-2.13675212860107421875)) * 0.467999994754791259765625)) * _1064 + ((pow(_636 * vec3(4.545454502105712890625), vec3(1.33000004291534423828125)) * 0.2199999988079071044921875) * (vec3(1.0) - _1056) + ((vec3(0.2199999988079071044921875) + ((_636 - vec3(0.2199999988079071044921875)) * 1.0)) * (_1056 - _1064))), vec3(0.4545454680919647216796875)), 1.0) * _540;
}

