#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D depth_map;
uniform highp vec4 environmentRGB_depthScale;
uniform highp vec4 ambientRGB_roughnessA;
uniform highp vec4 diffuseRGB_metallicA;
uniform highp sampler2D diffuse_map;
uniform highp sampler2D normal_map;
uniform highp sampler2D water_noisetex;
uniform highp float time;
uniform highp float wave_height;
uniform int water_has_bottom_layer;
uniform highp vec3 water_color;
uniform highp float water_depth;
uniform highp vec2 wave_offset;
uniform highp mat4 inverse_modelview;
uniform highp mat4 inv_camera_transform;
uniform highp vec3 wave_highlight_color;
uniform int light_count;
uniform highp vec3 light_positions[6];
uniform highp vec3 light_colors[6];
uniform highp sampler2D ibl_brdf_lut;
uniform highp samplerCube environment_map;

in highp vec2 waterTexCoord;
in highp vec3 tangent;
in highp vec3 bitangent;
in highp vec3 normal;
in highp vec3 pos;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp vec2 _1215 = vec2(-time, 0.0);
    highp vec4 _1526 = texture(water_noisetex, (waterTexCoord + (_1215 * 2.0)) * 0.0625);
    highp float _1527 = _1526.x;
    highp vec4 _1533 = texture(water_noisetex, ((waterTexCoord - (_1215 * 0.5)) - vec2(_1527)) * 0.0625);
    highp vec4 _1540 = texture(water_noisetex, (waterTexCoord - (mat2(vec2(2.0, 0.0), vec2(0.0, 2.0)) * vec2(_1527, _1533.x))) * 0.0625);
    highp float _1541 = _1540.x;
    highp vec2 _1551 = dFdx(waterTexCoord);
    highp vec2 _1553 = dFdy(waterTexCoord);
    highp float _1564 = dFdx(_1541);
    highp float _1566 = dFdy(_1541);
    highp vec2 _1227 = (inverse(mat2(_1551, _1553)) * vec2(_1564, _1566)).yx;
    highp vec2 _1231 = _1227 * _1227;
    highp mat3 _1264 = mat3(normalize(tangent), normalize(bitangent), normalize(normal));
    highp vec3 _1274 = normalize(vec3(_1227 * (-wave_height), 1.0));
    highp vec3 _4042;
    if (water_has_bottom_layer == 0)
    {
        _4042 = water_color * 0.0500000007450580596923828125;
    }
    else
    {
        highp mat3 _1298 = transpose(_1264);
        highp vec3 _1300 = _1298 * refract(normalize(pos), _1264 * _1274, 0.750187575817108154296875);
        highp vec3 _1317 = pos + ((_1264 * (_1300 / vec3(abs(_1300.z)))) * water_depth);
        highp vec2 _1332 = wave_offset + (inverse_modelview * vec4(_1317, 1.0)).xy;
        highp vec3 _1807 = -_1317;
        highp vec3 _1809 = normalize(_1298 * _1807);
        highp float _1835 = mix(8.0, 6.0, max(_1809.z, 0.0));
        highp float _1837 = 1.0 / _1835;
        highp vec2 _1845 = (_1809.xy * environmentRGB_depthScale.w) / vec2(_1835);
        highp vec4 _1849 = texture(depth_map, _1332);
        highp float _1850 = _1849.x;
        highp float _3867;
        highp float _3868;
        highp vec2 _3869;
        highp float _3871;
        _3871 = _1850;
        _3869 = _1332;
        _3868 = _1850;
        _3867 = 0.0;
        for (; _3867 < _3868; )
        {
            highp vec2 _1861 = _3869 - _1845;
            _3871 = _3868;
            _3869 = _1861;
            _3868 = texture(depth_map, _1861).x;
            _3867 += _1837;
            continue;
        }
        highp float _1876 = _3868 - _3867;
        highp vec2 _1891 = mix(_3869, _3869 + _1845, vec2(_1876 / (_1876 - ((_3871 - _3867) + _1837))));
        highp vec4 _1665 = texture(diffuse_map, _1891);
        highp vec3 _1669 = diffuseRGB_metallicA.xyz * _1665.xyz;
        highp vec4 _1898 = texture(normal_map, _1891);
        highp vec2 _1902 = (_1898.xy * 2.0) - vec2(1.0);
        highp float _1904 = _1902.x;
        highp float _1910 = _1902.y;
        highp vec3 _1792 = _1264 * vec3(_1904, _1910, sqrt((1.0 - (_1904 * _1904)) - (_1910 * _1910)));
        highp vec3 _1936 = normalize(_1807);
        highp float _1943 = max(dot(_1792, _1936), 0.0);
        highp vec3 _1950 = mix(vec3(0.039999999105930328369140625), _1669, vec3(diffuseRGB_metallicA.w));
        highp float _1956 = ambientRGB_roughnessA.w * ambientRGB_roughnessA.w;
        highp float _1962 = _1956 * _1956;
        highp float _1967 = (ambientRGB_roughnessA.w + 1.0) * 0.125;
        highp float _1986 = mix(_1943, 1.0, _1967);
        highp float _1993 = 1.0 - _1943;
        highp float _1996 = _1993 * _1993;
        highp float _2001 = (_1996 * _1996) * _1993;
        highp vec3 _2005 = mix(vec3(_2001), vec3(1.0), _1950);
        highp vec3 _3974;
        _3974 = vec3(0.0);
        for (int _3972 = 0; _3972 < light_count; )
        {
            highp vec3 _2064 = light_positions[_3972] - _1317;
            highp vec3 _2066 = normalize(_2064);
            highp vec3 _2071 = normalize(_1936 + _2066);
            highp float _2083 = max(dot(_1792, _2066), 0.0);
            highp float _2088 = max(dot(_1792, _2071), 0.0);
            highp float _2152 = 1.0 - max(dot(_2071, _2066), 0.0);
            highp float _2155 = _2152 * _2152;
            highp float _2171 = 1.0 - _2083;
            highp float _2174 = _2171 * _2171;
            highp float _2197 = ((_2088 * _2088) * (_1962 - 1.0)) + 1.0;
            _3974 += ((((mix(vec3((_2155 * _2155) * _2152), vec3(1.0), _1950) * (_1962 / ((((3.1415927410125732421875 * _2197) * _2197) * 4.0) * (_1986 * mix(_2083, 1.0, _1967))))) + (((vec3(1.0) - mix(vec3((_2174 * _2174) * _2171), vec3(1.0), _1950)) * (vec3(1.0) - _2005)) * (_1669 * mix(0.3183098733425140380859375, 0.0, diffuseRGB_metallicA.w)))) * (light_colors[_3972] / vec3(dot(_2064, _2064)))) * _2083);
            _3972++;
            continue;
        }
        highp vec4 _2258 = texture(ibl_brdf_lut, vec2(_1943, ambientRGB_roughnessA.w));
        _4042 = (ambientRGB_roughnessA.xyz + _3974) + (((texture(environment_map, (mat3(inv_camera_transform[0].xyz, inv_camera_transform[1].xyz, inv_camera_transform[2].xyz) * reflect(_1317, _1792)).xzy * vec3(1.0, -1.0, 1.0)).xyz * (((_1950 + ((max(vec3(1.0 - ambientRGB_roughnessA.w), _1950) - _1950) * _2001)) * _2258.x) + vec3(_2258.y))) * 1.0) * environmentRGB_depthScale.xyz);
    }
    highp vec3 _1343 = _1264 * _1274;
    highp vec3 _2346 = mix(water_color, water_color + wave_highlight_color, vec3(max(_1231.y - (5.0 * _1231.x), 0.0)));
    highp vec3 _2388 = normalize(-pos);
    highp float _2395 = max(dot(_1343, _2388), 0.0);
    highp float _2438 = mix(_2395, 1.0, 0.13750000298023223876953125);
    highp float _2445 = 1.0 - _2395;
    highp float _2448 = _2445 * _2445;
    highp float _2453 = (_2448 * _2448) * _2445;
    highp vec3 _2457 = mix(vec3(_2453), vec3(1.0), vec3(0.039999999105930328369140625));
    highp vec3 _4092;
    _4092 = vec3(0.0);
    for (int _4090 = 0; _4090 < light_count; )
    {
        highp vec3 _2516 = light_positions[_4090] - pos;
        highp vec3 _2518 = normalize(_2516);
        highp vec3 _2523 = normalize(_2388 + _2518);
        highp float _2535 = max(dot(_1343, _2518), 0.0);
        highp float _2540 = max(dot(_1343, _2523), 0.0);
        highp float _2604 = 1.0 - max(dot(_2523, _2518), 0.0);
        highp float _2607 = _2604 * _2604;
        highp float _2623 = 1.0 - _2535;
        highp float _2626 = _2623 * _2623;
        highp float _2649 = ((_2540 * _2540) * (-0.99989998340606689453125)) + 1.0;
        _4092 += ((((mix(vec3((_2607 * _2607) * _2604), vec3(1.0), vec3(0.020373187959194183349609375)) * (0.00010000001202570274472236633300781 / ((((3.1415927410125732421875 * _2649) * _2649) * 4.0) * (_2438 * mix(_2535, 1.0, 0.13750000298023223876953125))))) + (((vec3(1.0) - mix(vec3((_2626 * _2626) * _2623), vec3(1.0), vec3(0.020373187959194183349609375))) * (vec3(1.0) - _2457)) * (_2346 * 0.3183098733425140380859375))) * (light_colors[_4090] / vec3(dot(_2516, _2516)))) * _2535);
        _4090++;
        continue;
    }
    highp vec4 _2710 = texture(ibl_brdf_lut, vec2(_2395, 0.100000001490116119384765625));
    fragColor = vec4(mix(_4042, _4092 + (((texture(environment_map, (mat3(inv_camera_transform[0].xyz, inv_camera_transform[1].xyz, inv_camera_transform[2].xyz) * reflect(pos, _1343)).xzy * vec3(1.0, -1.0, 1.0)).xyz * (((vec3(0.020373187959194183349609375) + (vec3(0.879626810550689697265625) * _2453)) * _2710.x) + vec3(_2710.y))) * 1.0) * environmentRGB_depthScale.xyz), _2457), 1.0);
}

