#version 300 es

uniform mat4 r_projectionMatrix;
uniform mat4 r_modelViewMatrix;
uniform mat4 r_textureMatrix;
uniform vec2 gaps[4];
uniform float gap_angles[4];
uniform int gap_links[4];
uniform vec2 viewport;

layout(location = 0) in vec3 position;
out vec2 texCoord;
layout(location = 1) in vec2 texCoordRawIn;
out vec2 gap_views[4];
out mat2 gap_rotations[4];

void main()
{
    gl_Position = (r_projectionMatrix * r_modelViewMatrix) * vec4(position, 1.0);
    texCoord = (r_textureMatrix * vec4(texCoordRawIn, 0.0, 1.0)).xy;
    for (int _216 = 0; _216 < 4; )
    {
        float _137 = gap_angles[gap_links[_216]] - gap_angles[_216];
        float _191 = cos(_137);
        float _193 = sin(_137);
        vec2 _147 = ((((vec2(texCoord.x, 1.0 - texCoord.y) * viewport) - gaps[_216]) * mat2(vec2(_191, -_193), vec2(_193, _191))) + gaps[gap_links[_216]]) / viewport;
        _147.y = 1.0 - _147.y;
        gap_views[_216] = _147;
        float _205 = cos(gap_angles[_216]);
        float _207 = sin(gap_angles[_216]);
        gap_rotations[_216] = mat2(vec2(_205, -_207), vec2(_207, _205));
        _216++;
        continue;
    }
}

