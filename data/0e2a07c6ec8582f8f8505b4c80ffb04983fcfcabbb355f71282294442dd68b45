#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D depth_map;
uniform highp vec4 environmentRGB_depthScale;
uniform highp vec4 ambientRGB_roughnessA;
uniform highp vec4 diffuseRGB_metallicA;
uniform highp sampler2D roughness_map;
uniform highp sampler2D diffuse_map;
uniform highp sampler2D ambient_map;
uniform highp sampler2D ao_map;
uniform highp sampler2D normal_map;
uniform highp mat4 inv_camera_transform;
uniform int features_mask;
uniform int light_count;
uniform highp vec3 light_positions[6];
uniform highp vec3 light_colors[6];
uniform highp sampler2D ibl_brdf_lut;
uniform highp samplerCube environment_map;

in highp vec3 tangent;
in highp vec3 bitangent;
in highp vec3 normal;
in highp vec2 texCoord;
in highp vec3 pos;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp mat3 _1121 = mat3(normalize(tangent), normalize(bitangent), normalize(normal));
    highp vec2 _2591;
    if ((32 & features_mask) != int(0u))
    {
        highp vec3 _1432 = normalize(transpose(_1121) * (-pos));
        highp float _1458 = mix(16.0, 4.0, max(_1432.z, 0.0));
        highp float _1460 = 1.0 / _1458;
        highp vec2 _1468 = (_1432.xy * environmentRGB_depthScale.w) / vec2(_1458);
        highp vec4 _1472 = texture(depth_map, texCoord);
        highp float _1473 = _1472.x;
        highp float _2585;
        highp float _2586;
        highp vec2 _2587;
        highp float _2589;
        _2589 = _1473;
        _2587 = texCoord;
        _2586 = _1473;
        _2585 = 0.0;
        for (; _2585 < _2586; )
        {
            highp vec2 _1484 = _2587 - _1468;
            _2589 = _2586;
            _2587 = _1484;
            _2586 = texture(depth_map, _1484).x;
            _2585 += _1460;
            continue;
        }
        highp float _1499 = _2586 - _2585;
        _2591 = mix(_2587, _2587 + _1468, vec2(_1499 / (_1499 - ((_2589 - _2585) + _1460))));
    }
    else
    {
        _2591 = texCoord;
    }
    highp vec3 _2669;
    if ((1 & features_mask) != int(0u))
    {
        _2669 = diffuseRGB_metallicA.xyz * texture(diffuse_map, _2591).xyz;
    }
    else
    {
        _2669 = diffuseRGB_metallicA.xyz;
    }
    highp float _2658;
    if ((8 & features_mask) != int(0u))
    {
        _2658 = ambientRGB_roughnessA.w * texture(roughness_map, _2591).x;
    }
    else
    {
        _2658 = ambientRGB_roughnessA.w;
    }
    highp vec3 _2675;
    if ((4 & features_mask) != int(0u))
    {
        _2675 = ambientRGB_roughnessA.xyz * texture(ambient_map, _2591).xyz;
    }
    else
    {
        _2675 = ambientRGB_roughnessA.xyz;
    }
    bool _1370 = (64 & features_mask) != int(0u);
    bool _1383;
    if (_1370)
    {
        _1383 = (16 & features_mask) != int(0u);
    }
    else
    {
        _1383 = _1370;
    }
    highp float _2641;
    if (_1383)
    {
        _2641 = texture(ao_map, _2591).x;
    }
    else
    {
        _2641 = 1.0;
    }
    highp vec3 _2661;
    if ((2 & features_mask) != int(0u))
    {
        highp vec2 _1525 = (texture(normal_map, _2591).xy * 2.0) - vec2(1.0);
        highp float _1527 = _1525.x;
        highp float _1533 = _1525.y;
        _2661 = _1121 * vec3(_1527, _1533, sqrt((-_1533) * _1533 + ((-_1527) * _1527 + 1.0)));
    }
    else
    {
        _2661 = _1121 * vec3(0.0, 0.0, 1.0);
    }
    highp vec3 _1559 = normalize(-pos);
    highp float _1566 = max(dot(_2661, _1559), 0.0);
    highp vec3 _1573 = mix(vec3(0.039999999105930328369140625), _2669, vec3(diffuseRGB_metallicA.w));
    highp float _1579 = _2658 * _2658;
    highp float _1585 = _1579 * _1579;
    highp float _1590 = (_2658 + 1.0) * 0.125;
    highp float _1609 = mix(_1566, 1.0, _1590);
    highp float _1616 = 1.0 - _1566;
    highp float _1619 = _1616 * _1616;
    highp float _1624 = (_1619 * _1619) * _1616;
    highp vec3 _1628 = mix(vec3(_1624), vec3(1.0), _1573);
    highp vec3 _2703;
    _2703 = vec3(0.0);
    for (int _2701 = 0; _2701 < light_count; )
    {
        highp vec3 _1687 = light_positions[_2701] - pos;
        highp vec3 _1689 = normalize(_1687);
        highp vec3 _1694 = normalize(_1559 + _1689);
        highp float _1706 = max(dot(_2661, _1689), 0.0);
        highp float _1711 = max(dot(_2661, _1694), 0.0);
        highp float _1775 = 1.0 - max(dot(_1694, _1689), 0.0);
        highp float _1778 = _1775 * _1775;
        highp float _1794 = 1.0 - _1706;
        highp float _1797 = _1794 * _1794;
        highp float _1820 = (_1711 * _1711) * (_1579 * _1579 + (-1.0)) + 1.0;
        _2703 += (((((vec3(1.0) - mix(vec3((_1797 * _1797) * _1794), vec3(1.0), _1573)) * (vec3(1.0) - _1628)) * (_2669 * mix(0.3183098733425140380859375, 0.0, diffuseRGB_metallicA.w)) + (mix(vec3((_1778 * _1778) * _1775), vec3(1.0), _1573) * (_1585 / ((((3.1415927410125732421875 * _1820) * _1820) * 4.0) * (_1609 * mix(_1706, 1.0, _1590)))))) * (light_colors[_2701] / vec3(dot(_1687, _1687)))) * _1706);
        _2701++;
        continue;
    }
    highp vec3 _2723;
    if ((16 & features_mask) != int(0u))
    {
        highp vec4 _1887 = texture(ibl_brdf_lut, vec2(_1566, _2658));
        _2723 = ((texture(environment_map, (mat3(inv_camera_transform[0].xyz, inv_camera_transform[1].xyz, inv_camera_transform[2].xyz) * reflect(pos, _2661)).xzy * vec3(1.0, -1.0, 1.0)).xyz * (((_1573 + ((max(vec3(1.0 - _2658), _1573) - _1573) * _1624)) * _1887.x) + vec3(_1887.y))) * _2641) * environmentRGB_depthScale.xyz;
    }
    else
    {
        _2723 = vec3(0.0);
    }
    highp vec3 _1182 = (_2675 + _2703) + _2723;
    highp vec3 _2725;
    if ((128 & features_mask) != int(0u))
    {
        highp vec3 _2036 = smoothstep(vec3(0.0), vec3(0.2199999988079071044921875), _1182);
        highp vec3 _2044 = step(vec3(0.532000005245208740234375), _1182);
        _2725 = pow((vec3(1.0) - (exp((_1182 - vec3(0.532000005245208740234375)) * (-2.13675212860107421875)) * 0.467999994754791259765625)) * _2044 + ((pow(_1182 * vec3(4.545454502105712890625), vec3(1.33000004291534423828125)) * 0.2199999988079071044921875) * (vec3(1.0) - _2036) + ((vec3(0.2199999988079071044921875) + ((_1182 - vec3(0.2199999988079071044921875)) * 1.0)) * (_2036 - _2044))), vec3(0.4545454680919647216796875));
    }
    else
    {
        _2725 = _1182;
    }
    fragColor = vec4(_2725, 1.0);
}

