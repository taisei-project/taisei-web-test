#version 300 es
precision mediump float;
precision highp int;

vec3 _329;

uniform highp vec2 center;
uniform highp float inv_aspect_ratio;
uniform highp float R;
uniform highp vec2 bg_translation;
uniform highp sampler2D tex;
uniform highp sampler2D tex2;
uniform highp sampler2D blend_mask;
uniform highp vec4 r_color;

in highp vec2 texCoordRaw;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp vec2 _100 = texCoordRaw - center;
    highp float _106 = _100.y * inv_aspect_ratio;
    highp vec2 _310 = _100;
    _310.y = _106;
    highp float _113 = length(_310) / R;
    if (_113 < 2.5980761051177978515625)
    {
        discard;
    }
    highp float _264 = atan(_106, _100.x);
    highp float _285 = (3.1415927410125732421875 + (2.0 / _113)) - (2.5 * log(tanh(1.13600003719329833984375 * pow(_113 - 2.5980761051177978515625, 0.4050000011920928955078125))));
    highp float _289 = cos(_285);
    highp vec3 _314 = vec3(0.0);
    _314.z = _289;
    _314.x = sin(_285);
    highp float _297 = cos(_264);
    highp float _299 = sin(_264);
    highp vec2 _145 = mat2(vec2(_297, -_299), vec2(_299, _297)) * _314.xy;
    highp float _147 = _145.x;
    highp vec2 _182 = vec3(_147, _145.y, _289).xy + bg_translation;
    highp vec3 _326;
    _326.x = _182.x;
    _326.y = _182.y;
    fragColor = r_color * mix(texture(tex, _326.xy + vec2(0.5, 0.0)), texture(tex2, _326.xy + vec2(0.5)), vec4(clamp(mix(smoothstep(0.20000000298023223876953125, 0.0, _147 + 0.100000001490116119384765625) + smoothstep(-0.60000002384185791015625, 0.0, _289 + 0.100000001490116119384765625), smoothstep(0.20000000298023223876953125, 0.0, _147) + smoothstep(-0.60000002384185791015625, 0.0, _289), texture(blend_mask, _326.xy).x), 0.0, 1.0)));
    highp vec4 _232 = fragColor;
    highp vec3 _234 = _232.xyz * smoothstep(2.5980761051177978515625, 2.6280763149261474609375, _113);
    fragColor.x = _234.x;
    fragColor.y = _234.y;
    fragColor.z = _234.z;
}

