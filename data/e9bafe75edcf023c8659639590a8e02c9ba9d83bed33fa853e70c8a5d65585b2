#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D depth_map;
uniform highp vec4 environmentRGB_depthScale;
uniform highp vec4 ambientRGB_roughnessA;
uniform highp vec4 diffuseRGB_metallicA;
uniform highp sampler2D roughness_map;
uniform highp sampler2D diffuse_map;
uniform highp sampler2D ambient_map;
uniform highp sampler2D ao_map;
uniform highp sampler2D normal_map;
uniform highp mat4 inv_camera_transform;
uniform int features_mask;
uniform int light_count;
uniform highp vec3 light_positions[6];
uniform highp vec3 light_colors[6];
uniform highp sampler2D ibl_brdf_lut;
uniform highp samplerCube environment_map;

in highp vec3 tangent;
in highp vec3 bitangent;
in highp vec3 normal;
in highp vec2 texCoord;
in highp vec3 pos;
layout(location = 0) out highp vec4 fragColor;

void main()
{
    highp mat3 _1121 = mat3(normalize(tangent), normalize(bitangent), normalize(normal));
    highp vec2 _2577;
    if ((32 & features_mask) != int(0u))
    {
        highp vec3 _1418 = normalize(transpose(_1121) * (-pos));
        highp float _1444 = mix(16.0, 4.0, max(_1418.z, 0.0));
        highp float _1446 = 1.0 / _1444;
        highp vec2 _1454 = (_1418.xy * environmentRGB_depthScale.w) / vec2(_1444);
        highp vec4 _1458 = texture(depth_map, texCoord);
        highp float _1459 = _1458.x;
        highp float _2571;
        highp float _2572;
        highp vec2 _2573;
        highp float _2575;
        _2575 = _1459;
        _2573 = texCoord;
        _2572 = _1459;
        _2571 = 0.0;
        for (; _2571 < _2572; )
        {
            highp vec2 _1470 = _2573 - _1454;
            _2575 = _2572;
            _2573 = _1470;
            _2572 = texture(depth_map, _1470).x;
            _2571 += _1446;
            continue;
        }
        highp float _1485 = _2572 - _2571;
        _2577 = mix(_2573, _2573 + _1454, vec2(_1485 / (_1485 - ((_2575 - _2571) + _1446))));
    }
    else
    {
        _2577 = texCoord;
    }
    highp vec4 _1299 = texture(roughness_map, _2577);
    if (_1299.w < 0.300000011920928955078125)
    {
        discard;
    }
    highp float _1312 = ambientRGB_roughnessA.w * _1299.x;
    highp vec3 _2657;
    if ((1 & features_mask) != int(0u))
    {
        _2657 = diffuseRGB_metallicA.xyz * texture(diffuse_map, _2577).xyz;
    }
    else
    {
        _2657 = diffuseRGB_metallicA.xyz;
    }
    highp vec3 _2661;
    if ((4 & features_mask) != int(0u))
    {
        _2661 = ambientRGB_roughnessA.xyz * texture(ambient_map, _2577).xyz;
    }
    else
    {
        _2661 = ambientRGB_roughnessA.xyz;
    }
    bool _1356 = (64 & features_mask) != int(0u);
    bool _1369;
    if (_1356)
    {
        _1369 = (16 & features_mask) != int(0u);
    }
    else
    {
        _1369 = _1356;
    }
    highp float _2627;
    if (_1369)
    {
        _2627 = texture(ao_map, _2577).x;
    }
    else
    {
        _2627 = 1.0;
    }
    highp vec3 _2647;
    if ((2 & features_mask) != int(0u))
    {
        highp vec2 _1511 = (texture(normal_map, _2577).xy * 2.0) - vec2(1.0);
        highp float _1513 = _1511.x;
        highp float _1519 = _1511.y;
        _2647 = _1121 * vec3(_1513, _1519, sqrt((1.0 - (_1513 * _1513)) - (_1519 * _1519)));
    }
    else
    {
        _2647 = _1121 * vec3(0.0, 0.0, 1.0);
    }
    highp vec3 _1545 = normalize(-pos);
    highp float _1552 = max(dot(_2647, _1545), 0.0);
    highp vec3 _1559 = mix(vec3(0.039999999105930328369140625), _2657, vec3(diffuseRGB_metallicA.w));
    highp float _1565 = _1312 * _1312;
    highp float _1571 = _1565 * _1565;
    highp float _1576 = (_1312 + 1.0) * 0.125;
    highp float _1595 = mix(_1552, 1.0, _1576);
    highp float _1602 = 1.0 - _1552;
    highp float _1605 = _1602 * _1602;
    highp float _1610 = (_1605 * _1605) * _1602;
    highp vec3 _1614 = mix(vec3(_1610), vec3(1.0), _1559);
    highp vec3 _2689;
    _2689 = vec3(0.0);
    for (int _2687 = 0; _2687 < light_count; )
    {
        highp vec3 _1673 = light_positions[_2687] - pos;
        highp vec3 _1675 = normalize(_1673);
        highp vec3 _1680 = normalize(_1545 + _1675);
        highp float _1692 = max(dot(_2647, _1675), 0.0);
        highp float _1697 = max(dot(_2647, _1680), 0.0);
        highp float _1761 = 1.0 - max(dot(_1680, _1675), 0.0);
        highp float _1764 = _1761 * _1761;
        highp float _1780 = 1.0 - _1692;
        highp float _1783 = _1780 * _1780;
        highp float _1806 = ((_1697 * _1697) * (_1571 - 1.0)) + 1.0;
        _2689 += ((((mix(vec3((_1764 * _1764) * _1761), vec3(1.0), _1559) * (_1571 / ((((3.1415927410125732421875 * _1806) * _1806) * 4.0) * (_1595 * mix(_1692, 1.0, _1576))))) + (((vec3(1.0) - mix(vec3((_1783 * _1783) * _1780), vec3(1.0), _1559)) * (vec3(1.0) - _1614)) * (_2657 * mix(0.3183098733425140380859375, 0.0, diffuseRGB_metallicA.w)))) * (light_colors[_2687] / vec3(dot(_1673, _1673)))) * _1692);
        _2687++;
        continue;
    }
    highp vec3 _2709;
    if ((16 & features_mask) != int(0u))
    {
        highp vec4 _1873 = texture(ibl_brdf_lut, vec2(_1552, _1312));
        _2709 = ((texture(environment_map, (mat3(inv_camera_transform[0].xyz, inv_camera_transform[1].xyz, inv_camera_transform[2].xyz) * reflect(pos, _2647)).xzy * vec3(1.0, -1.0, 1.0)).xyz * (((_1559 + ((max(vec3(1.0 - _1312), _1559) - _1559) * _1610)) * _1873.x) + vec3(_1873.y))) * _2627) * environmentRGB_depthScale.xyz;
    }
    else
    {
        _2709 = vec3(0.0);
    }
    highp vec3 _1182 = (_2661 + _2689) + _2709;
    highp vec3 _2711;
    if ((128 & features_mask) != int(0u))
    {
        highp vec3 _2022 = smoothstep(vec3(0.0), vec3(0.2199999988079071044921875), _1182);
        highp vec3 _2030 = step(vec3(0.532000005245208740234375), _1182);
        _2711 = pow((((pow(_1182 * vec3(4.545454502105712890625), vec3(1.33000004291534423828125)) * 0.2199999988079071044921875) * (vec3(1.0) - _2022)) + ((vec3(0.2199999988079071044921875) + ((_1182 - vec3(0.2199999988079071044921875)) * 1.0)) * (_2022 - _2030))) + ((vec3(1.0) - (exp((_1182 - vec3(0.532000005245208740234375)) * (-2.13675212860107421875)) * 0.467999994754791259765625)) * _2030), vec3(0.4545454680919647216796875));
    }
    else
    {
        _2711 = _1182;
    }
    fragColor = vec4(_2711, 1.0);
}

